name: Deploy frontend image to ECR

on:
  pull_request:
    paths:
      - '**'
  push:
    branches:
      - main
    paths:
      - '**'

jobs:
  detect-changes:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.set_output.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed files
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="$(git rev-parse HEAD^)"
            HEAD_SHA="$(git rev-parse HEAD)"
          fi

          echo "🔍 BASE: $BASE_SHA"
          echo "🔍 HEAD: $HEAD_SHA"

          CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^(src/|public/|package\.json|dockerfile)' || true)

          echo "✅ 변경된 파일 목록:"
          echo "$CHANGED"

          if [ -n "$CHANGED" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  deploy-frontend:
    needs: detect-changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.frontend_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build & Push Frontend Image
        run: |
          IMAGE=${{ secrets.ECR_REGISTRY }}
          docker build -t $IMAGE .
          docker push $IMAGE
